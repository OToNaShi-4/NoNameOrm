from typing import List, Tuple

from Model.DataModel import DataModel
from Model.ModelProperty import BaseProperty, FilterListCell, ForeignKey


class JoinCell:
    def __init__(self, fk: ForeignKey, joinType): ...


class SqlGenerator:
    selectCol: List[BaseProperty]
    limit: str
    joinList: List[JoinCell]
    target: DataModel

    def __init__(self): ...

    def values(self, *args) -> SqlGenerator: ...

    def insert(self, model: DataModel) -> SqlGenerator: ...

    def select(self, *args: List[BaseProperty]) -> SqlGenerator: ...

    def update(self, target: DataModel) -> SqlGenerator: ...

    def set(self, *args) -> SqlGenerator: ...

    def From(self, target: DataModel) -> SqlGenerator: ...

    def where(self, args: FilterListCell = None) -> SqlGenerator: ...

    def Build(self) -> Tuple[str and List[str]]: ...

    def Limit(self, count: int, offset: int) -> SqlGenerator: ...

    def join(self, foreignKey: DataModel, joinType) -> SqlGenerator: ...

    def leftJoin(self, foreignKey: DataModel) -> SqlGenerator: ...

    def rightJoin(self, foreignKey: DataModel) -> SqlGenerator: ...

    def innerJoin(self, foreignKey: DataModel) -> SqlGenerator: ...
