from typing import List, Any

from DB.DB import DB
from DB.Generator import SqlGenerator
from Model.DataModel import ModelInstance, DataModel
from Model.ModelProperty import BaseProperty, FilterListCell


class BaseModelExecutor:
    sql: SqlGenerator
    model: DataModel
    db: DB
    work: Any

    def __init__(self, model: DataModel, work=None): ...

    def instanceToFilter(self, instance: ModelInstance): ...

    @property
    def generator(self) -> SqlGenerator: ...

    def getAnyMatch(self, instance: ModelInstance): ...

    def find(self, *cols: List[BaseProperty]): ...

    def save(self, instance: ModelInstance): ...

    def update(self, instance: ModelInstance): ...

    def execute(self): ...

    def process(self, res): ...


class AsyncModelExecutor(BaseModelExecutor):

    async def getAnyMatch(self, instance: ModelInstance) -> List: ...

    async def findAllBy(self, Filter: FilterListCell = None): ...

    async def find(self, *cols: List[BaseProperty]): ...

    async def save(self, instance: ModelInstance): ...

    async def update(self, instance: ModelInstance): ...

    async def execute(self) -> ModelInstance: ...
